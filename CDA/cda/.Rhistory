slc$pro <- slc$Yes/(slc$Yes+slc$No)
View(slc)
slc <- slc%>% mutate_at(c('pro'),as.numeric)
m <- glm(pro~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
m <- glm(cbind(Yes,No)~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
m <- glm(pro~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
m <- glm(cbind(Yes,No)~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
m <- glm(psat~Weight,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m)
library(ResourceSelection)
data("horseshoecrabs")
horseshoecrabs$psat <- as.integer(horseshoecrabs$Satellites > 0)
m <- glm(psat~Weight,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m)
pi0 <- 0.642 # cut-off value
pred_prob <- predict(m, type = "response")
pred_type <- cut(
pred_prob, breaks = c(0, pi0, 1), labels = 0:1,
include.lowest = TRUE
)
classification_table <- table(horseshoecrabs$psat, pred_type)
addmargins(classification_table)
sensitivity <- 45/62;sensitivity
specificity <- 85/173;specificity
#Roc curve and AUC area
library(ROCR)
par(pty = "s")
pred <- prediction(fitted(m), horseshoecrabs$psat)
perf <- performance(pred, "tpr", "fpr")
plot(perf, asp =1, xaxs="i", yaxs="i")
performance(pred,"auc")@y.values[[1]]
hoslem.test(m$y, fitted(m))
##d
m2 <- glm(psat~(Weight^2),data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
summary(m)
m <- glm(psat~Weight,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
##d
m2 <- glm(psat~Weight+a,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
library(ResourceSelection)
data("horseshoecrabs")
horseshoecrabs$psat <- as.integer(horseshoecrabs$Satellites > 0)
m <- glm(psat~Weight,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m)
pi0 <- 0.642 # cut-off value
pred_prob <- predict(m, type = "response")
pred_type <- cut(
pred_prob, breaks = c(0, pi0, 1), labels = 0:1,
include.lowest = TRUE
)
classification_table <- table(horseshoecrabs$psat, pred_type)
addmargins(classification_table)
sensitivity <- 45/62;sensitivity
specificity <- 85/173;specificity
#Roc curve and AUC area
library(ROCR)
par(pty = "s")
pred <- prediction(fitted(m), horseshoecrabs$psat)
perf <- performance(pred, "tpr", "fpr")
plot(perf, asp =1, xaxs="i", yaxs="i")
performance(pred,"auc")@y.values[[1]]
hoslem.test(m$y, fitted(m))
a <- horseshoecrabs$Weight^2
##d
m2 <- glm(psat~Weight+a,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
summary(m)
##d
m2 <- glm(psat~Weight+a,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
summary(m)
##d
m2 <- glm(psat~Weight+a,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
library(ResourceSelection)
library(cdabookfunc)
library(tidyverse)
library(cdabookdb)
data('smoking_lungcancer_cn')
slc <- data.frame(smoking_lungcancer_cn)
slc <- spread(slc,LungCancer,Freq)
m <- glm(cbind(Yes,No)~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
hoslem.test(m$y, fitted(m))
library(ResourceSelection)
library(cdabookfunc)
library(tidyverse)
library(cdabookdb)
data('smoking_lungcancer_cn')
slc <- data.frame(smoking_lungcancer_cn)
slc <- spread(slc,LungCancer,Freq)
m <- glm(cbind(Yes,No)~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
hoslem.test(m$y, fitted(m))
# X2 test
X2 <- sum(resid(m, type = "pearson") ^ 2)
x2_pvalue <- 1- pchisq(X2, df)
# X2 test
X2 <- sum(resid(m, type = "pearson") ^ 2)
# X2 test
X2 <- sum(resid(m, type = "pearson") ^ 2);X2
x2_pvalue <- 1- pchisq(X2, df)
# X2 test
df <- nrow(slc) - length(coef(m))
X2 <- sum(resid(m, type = "pearson") ^ 2);X2
x2_pvalue <- 1- pchisq(X2, df)
c(X2 = X2, pvalue = x2_pvalue)
resid(m, type = "pearson")
?order
# Check residuals to analyze further the quality of fit
order(resid(m, type = "pearson"))
res[order(res)]
# Check residuals to analyze further the quality of fit
res <- resid(m, type = "pearson")
res[order(res)]
m <- glm(cbind(Yes,No)~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
c(X2 = X2, pvalue = x2_pvalue)
res[order(res)]
?as.matrix
seq(10,40,10)
rep(0,4)
c(rep(0,4),rep(1,4),seq(10,40,10),seq(60,90,10)
c(rep(0,4),rep(1,4),seq(10,40,10),seq(60,90,10))
matrix(data=c(rep(0,4),rep(1,4),seq(10,40,10),seq(60,90,10)))
matrix(data=c(rep(0,4),rep(1,4),seq(10,40,10),seq(60,90,10)),nrow = 8)
d522 <- matrix(data=c(rep(0,4),rep(1,4),seq(10,40,10),seq(60,90,10)),nrow = 8)
plot(d522[1],d522[2])
plot(d522[,1],d522[,2])
plot(d522[,2],d522[,1])
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y')
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red')
line(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red')
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red')
lines(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red')
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red')
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red',lty = 1)
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red',lty = 1, type="o")
m <- glm(d522[,1]~d522[,2],family = binomial(link = 'logit'))summary(m)
m <- glm(d522[,1]~d522[,2],family = binomial(link = 'logit'));summary(m)
d522 <- matrix(data=c(rep(0,5),rep(1,5),seq(10,40,10),44,seq(50,90,10)),nrow = 10)
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red',lty = 1, type="o")
m <- glm(d522[,1]~d522[,2],family = binomial(link = 'logit'));summary(m)
d522 <- matrix(data=c(rep(0,5),rep(1,5),seq(10,50,10),seq(50,90,10)),nrow = 10)
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red',lty = 1, type="o")
m <- glm(d522[,1]~d522[,2],family = binomial(link = 'logit'));summary(m)
d522 <- matrix(data=c(rep(0,5),rep(1,5),seq(10,40,10),49.9,50.1,seq(60,90,10)),nrow = 10)
plot(d522[,2],d522[,1],xlab = 'variable',ylab = 'y',col = 'red',lty = 1, type="o")
m <- glm(d522[,1]~d522[,2],family = binomial(link = 'logit'));summary(m)
library(cdabookdb)
library(cdabookfunc)
library(MASS)
library(dplyr)
# get the lines of file
lines<-readLines('GDS5037/data_table.csv')
len <- length(lines)
data_COL=read.csv('GDS5037/data_table.csv',encoding='UTF-8',header=TRUE,nrows = 1)
COL <- colnames(data_COL)
description <- read.csv('GDS5037/description.csv')
denote <- data.frame(ID = c('MMA','control','SA'),Y = c(1,0,1))
data <- merge(description,denote,by = 'ID')
des <- data[,-c(1,2)]
f <- function(nrows,line){
data <- read.csv('GDS5037/data_table.csv',encoding='UTF-8',header=TRUE,nrows = nrows,skip = (line-1)*nrows)
# bug happened this skip parameter doesn't work
# data <- read.csv('GDS5037/data_table.csv',encoding='UTF-8',header=TRUE,nrows = nrows,skip = 1*nrows)
coln <- as.vector(as.matrix((data[,1])))
colnames(data) <- COL
data2 = data
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.numeric)
data4 <- data.frame(ID_REF,data3)
colnames(data4) <- c('ID_REF',coln)
data <- merge(des,data4,by = 'ID_REF');
return(data)
}
ptm <- proc.time()
nrows <- 1000
c2 <- c(rep(10000000,10))
id <- c(rep(0,10))
lines <- len%/%nrows
# so the bug is (len%/%) need a parenthesis
for (line in 1:lines){
if(line != lines){
d <- f(nrows,line)
}else{
nrows = (len%%nrows)
d = f(nrows,line)
}
coln <- colnames(d)[-c(1,2)]
for(i in 1:nrows){
m <- glm(Y~d[,i+2],family = binomial(link = 'logit'),data = d);
if(m$aic < max(c2)){
id[which.max(c2)] <- coln[i]# the sentence must be ahead the next one, or which.max(c2) would change
c2[which.max(c2)] <- m$aic
}
}
remove(d)
}
proc.time() - ptm
result <- list(c2,id)
library(readr)
ptm <- proc.time() #用于计算读取耗时
filter <- function (x,pos){
subset(x, ID_REF %in% result[[2]])
}  #定义筛选条件
df <- read_csv_chunked(file = "GDS5037/data_table.csv", DataFrameCallback$new(filter), chunk_size = 1000,col_names = TRUE, progress = FALSE)
t <- proc.time() - ptm
df
pre <- function(df){
coln <- as.vector(as.matrix((df[,1])))
colnames(df) <- COL
data2 = df
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.numeric)
data4 <- data.frame(ID_REF,data3)
colnames(data4) <- c('ID_REF',coln)
data <- merge(des,data4,by = 'ID_REF');
return(data)
}
data <- pre(df)
data
library(Hmisc)#加载包
res2 <- rcorr(as.matrix(data[,-c(1,2)]))
res2
## null deviance indicate all beta's indicator is zero
df
View(df)
data <- pre(df)
data
View(data)
glm(data$Y~data$A_32_P128023,family = binomial(link = 'logit'))$aic
R.version
----------------
data<-t(read.csv("GDS5037/data_table.csv",header = FALSE))
View(data)
##----------------
data<-t(read.csv("GDS5037/data_table.csv",header = FALSE))
a<-read.csv("new.csv")
View(data)
head(data)
data[,34444]
data[,34446]
data[,34445]
var <- data[,34445][-c(1,2)]
var
var <- as.vector(var)
var
df
pre <- function(df){
coln <- as.vector(as.matrix((df[,1])))
colnames(df) <- COL
data2 = df
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.numeric)
data4 <- data.frame(ID_REF,data3)
colnames(data4) <- c('ID_REF',coln)
data <- merge(des,data4,by = 'ID_REF');
return(data)
}
data <- pre(df)
View(data)
glm(data$Y~var,family = binomial(link = 'logit'))$aic
var
View(data)
glm(data$Y~var,family = binomial(link = 'logit'))$aic
var
var <- as.numeric(as.vector(var))
var
glm(data$Y~var,family = binomial(link = 'logit'))$aic
glm((data$Y)~var,family = binomial(link = 'logit'))$aic
glm((data$Y)~(var),family = binomial(link = 'logit'))$aic
var
glm(data$Y~data$A_32_P128023,family = binomial(link = 'logit'))$aic
data$A_32_P128023
df
pre <- function(df){
coln <- as.vector(as.matrix((df[,1])))
colnames(df) <- COL
data2 = df
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.character)
data3 <- apply(data3,1,as.numeric)
data4 <- data.frame(ID_REF,data3)
colnames(data4) <- c('ID_REF',coln)
data <- merge(des,data4,by = 'ID_REF');
return(data)
}
data <- pre(df)
data
pre <- function(df){
coln <- as.vector(as.matrix((df[,1])))
colnames(df) <- COL
data2 = df
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.character)
data3 <- apply(data3,1,as.numeric)
data4 <- data.frame(ID_REF,data3)
colnames(data4) <- c('ID_REF',coln)
data <- merge(des,data4,by = 'ID_REF');
return(data)
}
data <- pre(df)
debugSource('C:/Users/lzw/Desktop/属性数据分析/cda/cdahw5.R', encoding = 'UTF-8')
coln <- as.vector(as.matrix((df[,1])))
colnames(df) <- COL
data2 = df
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.character)
data3 <- apply(data3,1,as.numeric)
data3
ID_REF
data4 <- data.frame(ID_REF,data3)
data3$'ID_REF' <- ID_REF
data.frame(data3)
class(data3)
matrix(data3)
data4 <- data.frame(ID_REF,data3)
data4
coln <- as.vector(as.matrix((df[,1])))
colnames(df) <- COL
data2 = df
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.character)
data3 <- apply(data3,1,as.numeric)
data4 <- as.data.frame(ID_REF,data3)
data4
data4 <- as.data.frame(data3)
data4
data4$'ID_REF' <- ID_REF
data4$'ID_REF' <- as.data.frame(ID_REF)
data4$'ID_REF' <- as.vector(ID_REF)
class(ID_REF)
class(data4)
data4$'ID_REF' <- as.data.frame(ID_REF)
data4$'ID_REF'<- as.data.frame(ID_REF)
data4$'ID_REF'<- ID_REF
data4 <- data.frame(ID_REF,data4)
ID_REF
data4
data4 <- data.frame(ID_REF,t(data4))
data4
colnames(data4) <- c('ID_REF',coln)
data4
data <- merge(des,data4,by = 'ID_REF');
View(data)
data4
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
##d
m2 <- glm(psat~Weight+a,data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
a <- horseshoecrabs$Weight^2
a
a <- horseshoecrabs$Weight%^%2
##d
m2 <- glm(psat~ploy(Weight,2),data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
??poly
library(MASS)
##d
m2 <- glm(psat~ploy(Weight,2),data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
##d
m2 <- glm(psat~poly(Weight,2),data = horseshoecrabs,family = binomial(link = 'logit'));summary(m2)
library(ResourceSelection)
library(cdabookfunc)
library(tidyverse)
library(cdabookdb)
data('smoking_lungcancer_cn')
slc <- data.frame(smoking_lungcancer_cn)
slc <- spread(slc,LungCancer,Freq)
m <- glm(cbind(Yes,No)~factor(Smoking),data = slc, family = binomial(link = 'logit'));summary(m)
# X2 test
df <- nrow(slc) - length(coef(m))
X2 <- sum(resid(m, type = "pearson") ^ 2);X2
x2_pvalue <- 1- pchisq(X2, df)
c(X2 = X2, pvalue = x2_pvalue)
# Check residuals to analyze further the quality of fit
res <- resid(m, type = "pearson")
res[order(res)]
View(slc)
m <- glm(cbind(Yes,No)~factor(Smoking)+factor(City),data = slc, family = binomial(link = 'logit'));summary(m)
data <- pre(df)
library(cdabookdb)
library(cdabookfunc)
library(MASS)
library(dplyr)
# get the lines of file
lines<-readLines('GDS5037/data_table.csv')
len <- length(lines)
data_COL=read.csv('GDS5037/data_table.csv',encoding='UTF-8',header=TRUE,nrows = 1)
COL <- colnames(data_COL)
description <- read.csv('GDS5037/description.csv')
denote <- data.frame(ID = c('MMA','control','SA'),Y = c(1,0,1))
data <- merge(description,denote,by = 'ID')
des <- data[,-c(1,2)]
f <- function(nrows,line){
data <- read.csv('GDS5037/data_table.csv',encoding='UTF-8',header=TRUE,nrows = nrows,skip = (line-1)*nrows)
# bug happened this skip parameter doesn't work
# data <- read.csv('GDS5037/data_table.csv',encoding='UTF-8',header=TRUE,nrows = nrows,skip = 1*nrows)
coln <- as.vector(as.matrix((data[,1])))
colnames(data) <- COL
data2 = data
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.numeric)
data4 <- data.frame(ID_REF,data3)
colnames(data4) <- c('ID_REF',coln)
data <- merge(des,data4,by = 'ID_REF');
return(data)
}
ptm <- proc.time()
nrows <- 1000
c2 <- c(rep(10000000,10))
id <- c(rep(0,10))
lines <- len%/%nrows
# so the bug is (len%/%) need a parenthesis
for (line in 1:lines){
if(line != lines){
d <- f(nrows,line)
}else{
nrows = (len%%nrows)
d = f(nrows,line)
}
coln <- colnames(d)[-c(1,2)]
for(i in 1:nrows){
m <- glm(Y~d[,i+2],family = binomial(link = 'logit'),data = d);
if(m$aic < max(c2)){
id[which.max(c2)] <- coln[i]# the sentence must be ahead the next one, or which.max(c2) would change
c2[which.max(c2)] <- m$aic
}
}
remove(d)
}
proc.time() - ptm
result <- list(c2,id)
library(readr)
ptm <- proc.time() #用于计算读取耗时
filter <- function (x,pos){
subset(x, ID_REF %in% result[[2]])
}  #定义筛选条件
df <- read_csv_chunked(file = "GDS5037/data_table.csv", DataFrameCallback$new(filter), chunk_size = 1000,col_names = TRUE, progress = FALSE)
t <- proc.time() - ptm
df
pre <- function(df){
coln <- as.vector(as.matrix((df[,1])))
colnames(df) <- COL
data2 = df
ID_REF <- colnames(data2)
ID_REF <- ID_REF[-c(1,2)]
data3 <- data2[,-c(1,2)]
data3 <- apply(data3,1,as.numeric)
data4 <- data.frame(ID_REF,data3)
colnames(data4) <- c('ID_REF',coln)
data <- merge(des,data4,by = 'ID_REF');
return(data)
}
data <- pre(df)
data
library(Hmisc)#加载包
res2 <- rcorr(as.matrix(data[,-c(1,2)]))
res2
m2.full <- glm(df$Y,)
data
View(data)
data[,c(seq(3,12,1))]
j <- data[,c(seq(3,12,1))]
j
View(j)
View(data)
m2.full <- glm(data$Y~data[,c(seq(3,12,1))],family = binomial(link = 'logit',data = data))
?glm
## Create a formula for a model with a large number of variables:
xnam <- paste0("x", 1:25)
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
fmla
colnames(data)
xnam <- paste0(colnames(data)[-c(1,2)])
(fmla <- as.formula(paste("Y ~ ", paste(xnam, collapse= "+"))))
fmla
m2.full <- glm(fmla,family = binomial(link = 'logit'),data = data)
m2_backward <- step(m2.full, trace = T)
m2.full <- glm(fmla,family = binomial(link = 'logit'),data = data)
m2_step <- step(m2.full, trace = T)
res[order(res)]
m <- glm(cbind(Yes,No)~factor(Smoking)+factor(City),data = slc, family = binomial(link = 'logit'));summary(m)
library(ResourceSelection)
library(cdabookfunc)
library(tidyverse)
library(cdabookdb)
data('smoking_lungcancer_cn')
slc <- data.frame(smoking_lungcancer_cn)
slc <- spread(slc,LungCancer,Freq)
m <- glm(cbind(Yes,No)~factor(Smoking)+factor(City),data = slc, family = binomial(link = 'logit'));summary(m)
# X2 test
df <- nrow(slc) - length(coef(m))
X2 <- sum(resid(m, type = "pearson") ^ 2);X2
x2_pvalue <- 1- pchisq(X2, df)
c(X2 = X2, pvalue = x2_pvalue)
# Check residuals to analyze further the quality of fit
res <- resid(m, type = "pearson")
res[order(res)]
m2.step <- glm(Y ~ A_23_P411162 + A_24_P145163 + A_24_P263330 + A_24_P933458 + A_32_P210622,data = data,family = binomial(link = 'logit'));summary(m2.step)
